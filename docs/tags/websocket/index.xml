<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Websocket on Zhaoyu Li</title>
    <link>https://zhaoyu.li/tags/websocket/</link>
    <description>Recent content in Websocket on Zhaoyu Li</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Zhaoyu Li</copyright>
    <lastBuildDate>Sun, 15 Apr 2012 12:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://zhaoyu.li/tags/websocket/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HTML5 之 WebSocket 通信协议介绍</title>
      <link>https://zhaoyu.li/post/html5-websocket-communication-protocol/</link>
      <pubDate>Sun, 15 Apr 2012 12:00:00 +0000</pubDate>
      
      <guid>https://zhaoyu.li/post/html5-websocket-communication-protocol/</guid>
      <description>更新：Chrome和Firefox的WebSocket协议已更新到最新版，不再支持旧版协议。本篇文章中的握手协议和数据报文已不再适用。
最近参与一个有关HTML5的比赛，要用到WebSocket，经过一些实验后简单总结一下WebSocket的基础用法。
WebSocket是HTML5的一种新的协议，它是实现了浏览器与服务器的双向通讯。
在 WebSocket API 中，浏览器和服务器只需要要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。（这两小段介绍摘自维基百科）
WebSocket协议 WebSocket的协议非常简单，这也是其最大的优点之一。
在客户端（如浏览器），可以利用JavaScript直接new WebSocket来实例化一个WebSocket对象，其参数格式为ws://yourdomain:port/path。WebSocket会根据这段字符串，发送Header到指定服务器端口，其数据格式大概如下：
GET / HTTP/1.1 Origin: http://hackecho.com Cookie: __utma=99as Connection: Upgrade Host: hackecho.com Sec-WebSocket-Key: uRovscZjNol/umbTt5uKmw== Upgrade: websocket Sec-WebSocket-Version: 13  此时服务端应该返回的信息是：
HTTP/1. WebSocket Protocol Handshake Date: Fri, Feb 17:38: GMT Connection: Upgrade Server: HackEcho Server Upgrade: WebSocket Access-Control-Allow-Origin: http://hackecho.com Access-Control-Allow-Credentials: true Sec-WebSocket-Accept: rLHCkw/SKsO9GAH/ZSFhBATDKrU= Access-Control-Allow-Headers: content-type  一旦握手成功建立连接，数据便可以通过WebSocket在服务器和客户端之间进行传送了。
WebSocket事件 客户端在握手成功后，会触发WebSocket对象的onopen事件，告诉客户端连接已经成功建立了。
客户端的WebSocket对象一共绑定了四个事件：
1、onopen：连接建立时触发；
2、onmessage：收到服务端消息时触发；
3、onerror：连接出错时触发；
4、onclose：连接关闭时触发；
客户端连接的建立 这里提供一个例子来更好地理解客户端是怎样建立WebSocket连接的。例子来自于文末参考资料的第一篇文章。
将下列代码保存为一个html文件，如websocket.html，在浏览器中打开。页面会自动向服务器（由 http://www.websocket.org 提供）连接，发送一个消息并将返回的结果显示出来，最后断开连接。
通过其中的JavaScript代码即可看出用JS在本地建立连接的所有过程，比较简单，不再赘述，请大家看代码。</description>
    </item>
    
  </channel>
</rss>